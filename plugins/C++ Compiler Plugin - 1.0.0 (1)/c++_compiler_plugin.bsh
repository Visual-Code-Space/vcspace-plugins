void main() {
    EditorActivity activity = app.getEditorActivity();
    
    if (activity != null) {
        // Open the specified file
        activity.openFile(new File("/storage/emulated/0/VCSpace/test.cpp"));
    
        // Add a menu item for compiling C++
        activity.addMenu("Compile C++", 0, new Runnable() {
            public void run() {
                compileAndRunCpp(activity);
            }
        });
        
        // Handle click event for executing C++ code
        activity.getMenu().findItem(R.id.menu_execute).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
            public boolean onMenuItemClick(MenuItem item) {
                compileAndRunCpp(activity);
                return true;
            }
        });
    } else {
        Toast.makeText(app.getApplicationContext(), "Activity is null", Toast.LENGTH_SHORT).show();
    }
}

void compileAndRunCpp(EditorActivity activity) {
    File selectedFile = activity.getSelectedEditor().getFile();
    
    if (selectedFile != null) {
        String outputFile = selectedFile.getParent() + "/" + helper.getFileNameWithoutExtension(selectedFile) + ".out";
        File workingDir = new File(selectedFile.getParent());
        
        // Prepare the intent to compile and run the C++ file
        Intent runIntent = new Intent();
        runIntent.setPackage("com.termux");
        runIntent.setClassName("com.termux", "com.termux.app.RunCommandService");
        runIntent.setAction("com.termux.RUN_COMMAND");
        
        // Prepare the g++ command
        String command = selectedFile.getAbsolutePath() + " -o " + outputFile + " && " + outputFile;
        
        // Set the working directory
        runIntent.putExtra("com.termux.RUN_COMMAND_WORKDIR", workingDir.getAbsolutePath());
        
        // Use g++ directly
        runIntent.putExtra("com.termux.RUN_COMMAND_PATH", "/data/data/com.termux/files/usr/bin/g++");
        runIntent.putExtra("com.termux.RUN_COMMAND_ARGUMENTS", new String[]{command});
        
        // Use startForegroundService for SDK 34
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            activity.startForegroundService(runIntent);
        } else {
            activity.startService(runIntent);
        }
        
        // Show a toast message for compilation and execution
        Toast.makeText(activity, "Compiling and running...", Toast.LENGTH_SHORT).show();
        
    } else {
        // Show error message if no file is selected
        Toast.makeText(activity, "No file selected", Toast.LENGTH_SHORT).show();
    }
}
